"use strict";
var getCategorys = (function() {
    var e = _asyncToGenerator(
      regeneratorRuntime.mark(function o() {
        var a;
        return regeneratorRuntime.wrap(
          function(n) {
            for (;;)
              switch ((n.prev = n.next)) {
                case 0:
                  return (
                    swal({
                      title: "Cargando men\xFA...",
                      allowOutsideClick: !1,
                      onOpen: function onOpen() {
                        swal.showLoading();
                      }
                    }),
                    (n.prev = 1),
                    (n.next = 4),
                    $.ajax({
                      url: ruta,
                      type: "POST",
                      dataType: "JSON",
                      data: { funcion: "getCategorys", idCliente: cliente }
                    })
                  );
                case 4:
                  (a = n.sent),
                    $.each(a, function(l, s) {
                      $("#menu-categorias ul").append(
                        "<li class='col-12' onclick='goPlates(" +
                          s.Grupo +
                          ");' style='cursor: pointer;'><figure>" +
                          imageDefault +
                          "</figure><div class='categorias-descripcion'><article><p class='descripcion'>" +
                          s.Nombre +
                          "</p></article></div><div class='btn-siguiente text-right'><a href='#' onclick='goPlates(" +
                          s.Grupo +
                          ");'><i class='fa fa-chevron-right'></i></a></div></li>"
                      );
                    }),
                    swal.close(),
                    (n.next = 15);
                  break;
                case 9:
                  (n.prev = 9),
                    (n.t0 = n["catch"](1)),
                    console.error(n.t0),
                    console.log("funcion: getCategorys()"),
                    console.log("Error: " + n.t0),
                    swal({
                      title: "Error!",
                      text: "Ocurrio un error, por favor intentelo de nuevo",
                      type: "error",
                      allowOutsideClick: !1,
                      confirmButtonText: "Aceptar"
                    });
                case 15:
                case "end":
                  return n.stop();
              }
          },
          o,
          this,
          [[1, 9]]
        );
      })
    );
    return function() {
      return e.apply(this, arguments);
    };
  })(),
  getPlates = (function() {
    var e = _asyncToGenerator(
      regeneratorRuntime.mark(function o(a) {
        var r;
        return regeneratorRuntime.wrap(
          function(l) {
            for (;;)
              switch ((l.prev = l.next)) {
                case 0:
                  return (
                    swal({
                      title: "Cargando productos...",
                      allowOutsideClick: !1,
                      onOpen: function onOpen() {
                        swal.showLoading();
                      }
                    }),
                    (l.prev = 1),
                    (l.next = 4),
                    $.ajax({
                      url: ruta,
                      type: "POST",
                      dataType: "JSON",
                      data: { funcion: "getPlates", category: a }
                    })
                  );
                case 4:
                  (r = l.sent),
                    $.each(r, function(s, c) {
                      $("#menu-categorias ul").append(
                        "<li class='col-12' onclick=\"goPlate('" +
                          c.Consecutivo +
                          "');\" style='cursor: pointer;'><figure>" +
                          imageDefault +
                          "</figure><div class='categorias-descripcion'><article><p class='descripcion'>" +
                          c.Nombre +
                          "</p></article></div><div class='btn-siguiente text-right'><a href='#' onclick=\"goPlate('" +
                          c.Consecutivo +
                          "');\"><i class='fa fa-chevron-right'></i></a></div></li>"
                      );
                    }),
                    swal.close(),
                    (l.next = 15);
                  break;
                case 9:
                  (l.prev = 9),
                    (l.t0 = l["catch"](1)),
                    console.error(l.t0),
                    console.log("funcion: getPlates()"),
                    console.log("Error: " + l.t0),
                    swal({
                      title: "Error!",
                      text: "Ocurrio un error, por favor intentelo de nuevo",
                      type: "error",
                      allowOutsideClick: !1,
                      confirmButtonText: "Aceptar"
                    });
                case 15:
                case "end":
                  return l.stop();
              }
          },
          o,
          this,
          [[1, 9]]
        );
      })
    );
    return function() {
      return e.apply(this, arguments);
    };
  })(),
  getAddons = (function() {
    var e = _asyncToGenerator(
      regeneratorRuntime.mark(function o(a) {
        var r;
        return regeneratorRuntime.wrap(
          function(l) {
            for (;;)
              switch ((l.prev = l.next)) {
                case 0:
                  return (
                    swal({
                      title: "Cargando producto...",
                      allowOutsideClick: !1,
                      onOpen: function onOpen() {
                        swal.showLoading();
                      }
                    }),
                    (l.prev = 1),
                    (l.next = 4),
                    $.ajax({
                      url: ruta,
                      type: "POST",
                      dataType: "JSON",
                      data: {
                        funcion: "getAddons",
                        plate: a,
                        idCliente: cliente
                      }
                    })
                  );
                case 4:
                  (r = l.sent),
                    r.length
                      ? ($("#plate-addons-count").addClass("hide"),
                        $("#plate-img").append(imageDefault2),
                        $("#plate-title").append(
                          r[0].Nombre +
                            "<br/>$" +
                            r[0].Precio +
                            ".00 Pesos M.N."
                        ),
                        null === r[0].Agrupador
                          ? ($("#light #plate-addons-count").remove(),
                            $("#light h3").remove(),
                            $("#light hr").remove(),
                            $("#end").attr("onclick", "addProduct(1, 0)"),
                            $("#add").attr("onclick", "addProduct(0, 0)"),
                            $("#addons-message").remove())
                          : ($.each(r, function(s, c) {
                              $("#plate-addons").append(
                                '<section class="col-6 float-left no-pl"><label class="form-check-label"><input class="form-check-input" type="checkbox" name="addon' +
                                  s +
                                  '" value="' +
                                  c.consecutivoComplemento +
                                  '" id="addon' +
                                  s +
                                  '">' +
                                  c.nombreComplemento +
                                  "</label></section>"
                              );
                            }),
                            $("#addons-message-max").html(r[0].maximoProducto),
                            $(
                              "#plate-addons input[type='checkbox']"
                            ).change(function() {
                              var s = $("#plate-addons input:checked").length,
                                c = $(this).attr("id"),
                                p = $(this)
                                  .parent("label")
                                  .text();
                              s == r[0].maximoProducto
                                ? $(
                                    "#plate-addons input:checkbox:not(:checked)"
                                  ).prop("disabled", !0)
                                : $("#plate-addons input:checkbox").prop(
                                    "disabled",
                                    !1
                                  );
                              var u = $("input:checkbox:checked").length;
                              $("#addons-message-how").html(u),
                                0 < u && 0 < r[0].Cantidad
                                  ? $("#plate-addons-count").removeClass("hide")
                                  : $("#plate-addons-count").addClass("hide"),
                                0 < r[0].Cantidad &&
                                  ($("#plate-addons-count").show(),
                                  $("#addons-message-count").html(
                                    r[0].Cantidad
                                  ),
                                  $(this).is(":checked")
                                    ? $("#plate-addons-count").append(
                                        '<section class="col-6 float-left no-pl"><label class="form-check-label"><input class="form-control-text" type="number" name="count-' +
                                          c +
                                          '" value="" id="count-' +
                                          c +
                                          '">' +
                                          p +
                                          "</label></section>"
                                      )
                                    : $("#count-" + c + "")
                                        .parent()
                                        .parent()
                                        .remove(),
                                  $("#average-max").val(r[0].Cantidad));
                            })))
                      : ($("#light #plate-addons-count").remove(),
                        $("#light h3").remove(),
                        $("#light hr").remove(),
                        $("#plate-img").append(imageDefault2),
                        $("#plate-title").append("Sin informaci\xF3n"),
                        $("#end").attr("onclick", "addProduct(1, 0)"),
                        $("#add").attr("onclick", "addProduct(0, 0)"),
                        $("#addons-message").remove()),
                    swal.close(),
                    (l.next = 15);
                  break;
                case 9:
                  (l.prev = 9),
                    (l.t0 = l["catch"](1)),
                    console.error(l.t0),
                    console.log("funcion: getAddons()"),
                    console.log("Error: " + l.t0),
                    swal({
                      title: "Error!",
                      text: "Ocurrio un error, por favor intentelo de nuevo",
                      type: "error",
                      allowOutsideClick: !1,
                      confirmButtonText: "Aceptar"
                    });
                case 15:
                case "end":
                  return l.stop();
              }
          },
          o,
          this,
          [[1, 9]]
        );
      })
    );
    return function() {
      return e.apply(this, arguments);
    };
  })(),
  addCategoriasCombo = (function() {
    var e = _asyncToGenerator(
      regeneratorRuntime.mark(function o() {
        var a;
        return regeneratorRuntime.wrap(
          function(n) {
            for (;;)
              switch ((n.prev = n.next)) {
                case 0:
                  return (
                    (n.prev = 0),
                    (n.next = 3),
                    $.ajax({
                      url: ruta,
                      type: "POST",
                      dataType: "JSON",
                      data: { funcion: "getCategorys", idCliente: cliente }
                    })
                  );
                case 3:
                  (a = n.sent),
                    $.each(a, function(l, s) {
                      localStorage.getItem("category") == s.Grupo
                        ? $("#categoria").append(
                            $("<option>", {
                              value: s.Grupo,
                              text: s.Nombre,
                              selected: "selected"
                            })
                          )
                        : $("#categoria").append(
                            $("<option>", { value: s.Grupo, text: s.Nombre })
                          );
                    }),
                    $("#categoria").on("change", function() {
                      goPlates(this.value);
                    }),
                    swal.close(),
                    (n.next = 15);
                  break;
                case 9:
                  (n.prev = 9),
                    (n.t0 = n["catch"](0)),
                    console.error(n.t0),
                    console.log("funcion: addCategoriasCombo()"),
                    console.log("Error: " + n.t0),
                    swal({
                      title: "Error!",
                      text: "Ocurrio un error, por favor intentelo de nuevo",
                      type: "error",
                      allowOutsideClick: !1,
                      confirmButtonText: "Aceptar"
                    });
                case 15:
                case "end":
                  return n.stop();
              }
          },
          o,
          this,
          [[0, 9]]
        );
      })
    );
    return function() {
      return e.apply(this, arguments);
    };
  })(),
  setShoppingSummary = (function() {
    var e = _asyncToGenerator(
      regeneratorRuntime.mark(function o() {
        var a, r, n, l, s, c, p;
        return regeneratorRuntime.wrap(
          function(g) {
            for (;;)
              switch ((g.prev = g.next)) {
                case 0:
                  return (
                    swal({
                      title: "Cargando pedido...",
                      allowOutsideClick: !1,
                      onOpen: function onOpen() {
                        swal.showLoading();
                      }
                    }),
                    (g.prev = 1),
                    (g.next = 4),
                    $.ajax({
                      url: ruta,
                      type: "POST",
                      dataType: "JSON",
                      data: {
                        funcion: "getPlateInfo",
                        summary: localStorage.getItem("shopping"),
                        promotion: localStorage.getItem("promotionsAll")
                      }
                    })
                  );
                case 4:
                  if (
                    ((a = g.sent),
                    "" == a.total
                      ? ($("#average").remove(),
                        $("#average-modal").remove(),
                        $("#realizaPago").remove(),
                        $("#ordenaComentarios").remove(),
                        $("#send-pedido").remove(),
                        $("#deliver").remove(),
                        $("#shopping-cart").remove())
                      : ((r =
                          null === localStorage.getItem("collect_cost")
                            ? 0
                            : parseInt(localStorage.getItem("collect_cost"))),
                        (n = parseInt(a.total) + r),
                        $("#average").append(
                          "El total de tu pedido es de: $" + n + ".00 pesos"
                        ),
                        $("#average-modal").append("$" + n + ".00 pesos"),
                        localStorage.setItem("importe", n)),
                    "" != a.html)
                  ) {
                    g.next = 12;
                    break;
                  }
                  $('<tr><td colspan="4">Sin productos</td></tr>').insertAfter(
                    "#tablaEstadoCuenta tr:last"
                  ),
                    localStorage.removeItem("shopping"),
                    localStorage.removeItem("promotions"),
                    (g.next = 25);
                  break;
                case 12:
                  if (null !== localStorage.getItem("branchConf")) {
                    g.next = 16;
                    break;
                  }
                  return (
                    $(a.html).insertAfter("#tablaEstadoCuenta tr:last"),
                    swal.close(),
                    g.abrupt("return", !1)
                  );
                case 16:
                  if (
                    ((l = JSON.parse(localStorage.getItem("branchConf"))),
                    (s = parseInt(l.compraMinima)),
                    (c = localStorage.getItem("importe")),
                    (p = JSON.parse(localStorage.getItem("shopping")).length),
                    l.productosMaximos < p
                      ? swal({
                          title: "!Atenci\xF3n\xA1",
                          type: "info",
                          confirmButtonText: "Aceptar",
                          animation: !1,
                          text:
                            "La sucursal " +
                            l.nombreAgencia +
                            " cuenta con una lista de productos maximos de " +
                            l.productosMaximos +
                            ", usted cuenta con un total de productos de " +
                            p +
                            "",
                          showLoaderOnConfirm: !0,
                          allowOutsideClick: !1,
                          preConfirm: function preConfirm() {
                            $("#realizaPago").hide();
                          }
                        })
                      : $("#realizaPago").show(),
                    !(c < s))
                  ) {
                    g.next = 24;
                    break;
                  }
                  return (
                    swal({
                      title: "!Atenci\xF3n\xA1",
                      type: "info",
                      confirmButtonText: "Ir a productos",
                      animation: !1,
                      text:
                        "La sucursal " +
                        l.nombreAgencia +
                        " cuenta con una compra minima de $" +
                        s +
                        ".00, usted cuenta con un importe de $" +
                        c +
                        ".00",
                      showLoaderOnConfirm: !0,
                      allowOutsideClick: !1,
                      preConfirm: function preConfirm() {
                        window.location.replace("ordena.html");
                      }
                    }),
                    g.abrupt("return", !1)
                  );
                case 24:
                  $(a.html).insertAfter("#tablaEstadoCuenta tr:last");
                case 25:
                  swal.close(), (g.next = 34);
                  break;
                case 28:
                  (g.prev = 28),
                    (g.t0 = g["catch"](1)),
                    console.error(g.t0),
                    console.log("funcion: setShoppingSummary()"),
                    console.log("Error: " + g.t0),
                    swal({
                      title: "Error!",
                      text: "Ocurrio un error, por favor intentelo de nuevo",
                      type: "error",
                      allowOutsideClick: !1,
                      confirmButtonText: "Aceptar"
                    });
                case 34:
                case "end":
                  return g.stop();
              }
          },
          o,
          this,
          [[1, 28]]
        );
      })
    );
    return function() {
      return e.apply(this, arguments);
    };
  })(),
  getMaxPlateMinutes = (function() {
    var e = _asyncToGenerator(
      regeneratorRuntime.mark(function o() {
        var a;
        return regeneratorRuntime.wrap(
          function(n) {
            for (;;)
              switch ((n.prev = n.next)) {
                case 0:
                  return (
                    (n.prev = 0),
                    (n.next = 3),
                    $.ajax({
                      url: ruta,
                      type: "POST",
                      dataType: "JSON",
                      data: {
                        funcion: "getMaxPlateMinutes",
                        summary: localStorage.getItem("shopping"),
                        promotion: localStorage.getItem("promotionsAll")
                      }
                    })
                  );
                case 3:
                  (a = n.sent),
                    localStorage.setItem("MaxMinutes", a),
                    (n.next = 13);
                  break;
                case 7:
                  (n.prev = 7),
                    (n.t0 = n["catch"](0)),
                    console.error(n.t0),
                    console.log("funcion: getMaxPlateMinutes()"),
                    console.log("Error: " + n.t0),
                    swal({
                      title: "Error!",
                      text: "Ocurrio un error, por favor intentelo de nuevo",
                      type: "error",
                      allowOutsideClick: !1,
                      confirmButtonText: "Aceptar"
                    });
                case 13:
                case "end":
                  return n.stop();
              }
          },
          o,
          this,
          [[0, 7]]
        );
      })
    );
    return function() {
      return e.apply(this, arguments);
    };
  })();
function _asyncToGenerator(e) {
  return function() {
    var o = e.apply(this, arguments);
    return new Promise(function(a, r) {
      function n(l, s) {
        try {
          var c = o[l](s),
            p = c.value;
        } catch (u) {
          return void r(u);
        }
        return c.done
          ? void a(p)
          : Promise.resolve(p).then(
              function(u) {
                n("next", u);
              },
              function(u) {
                n("throw", u);
              }
            );
      }
      return n("next");
    });
  };
}
var imageDefault = "<img src='img/square.jpg' />",
  imageDefault2 = "<img class='img-responsive' src='img/square.jpg' />";
if (localStorage.getItem("shopping") || localStorage.getItem("promotions")) {
  $("#shopping-cart").show();
  var number_shopping =
      null == localStorage.getItem("shopping")
        ? ""
        : JSON.parse(localStorage.getItem("shopping")).length,
    number_promotions =
      null == localStorage.getItem("promotionsAll")
        ? ""
        : JSON.parse(localStorage.getItem("promotionsAll")).length;
  $("#number-cart").html(number_shopping + number_promotions);
} else $("#shopping-cart").hide(), $("#number-cart").html("");
function getBranches() {
  $.ajax({
    url: ruta,
    type: "POST",
    data: { funcion: "getBranches" },
    success: function success(e) {
      e = JSON.parse(e);
    },
    error: function error(e, o, a) {
      console.log("funcion: getBranches()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getLastPlate() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: { funcion: "getLastPlate", tarjeta: localStorage.getItem("tarjeta") },
    success: function success(e) {
      $.each(e, function(o, a) {
        $(
          "<tr><th>" +
            a.Fecha +
            "</th><th>" +
            a.Nombre +
            "</th><th>$" +
            a.Precio +
            ".00</th><th><a href='#' onclick=\"goPlate('" +
            a.Consecutivo +
            "');\" class='btn-default'>Pedir</a></th></tr>"
        ).insertAfter("#tablaEstadoCuenta .headers");
      });
    },
    error: function error(e, o, a) {
      console.log("funcion: getLastPlate()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function goPlates(e) {
  localStorage.setItem("category", e),
    (window.location = "ordenaProducto.html");
}
function goPlate(e) {
  localStorage.setItem("plate", e), (window.location = "ordenaPlatillo.html");
}
function goPromotion(e) {
  localStorage.setItem("promotion", e),
    (window.location = "ordenaPromocion.html");
}
function goOrder() {
  window.location = "ordenaOrdenes.html";
}
function addProduct(e, o) {
  if (o) {
    var a = $("#plate-addons input:checked").length;
    if (0 == a)
      return (
        $("#alertaRegistro")
          .html(
            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes de elegir alg\xFAn complemento'
          )
          .show(),
        ""
      );
    var r = 0,
      n = $("#average-max").val(),
      l = !1;
    if (
      ($("input[id*='count-addon']").each(function() {
        return 0 == this.value
          ? ($("#alertaRegistro")
              .html(
                '<i class="fa fa-warning fa-lg"></i>&nbsp;La cantidad del complemento no puede ser 0 o estar vac\xEDo'
              )
              .show(),
            (l = !0),
            "")
          : void ((r += parseInt(this.value)), (l = !1));
      }),
      l)
    )
      return "";
    if (n != r)
      return (
        $("#alertaRegistro")
          .html(
            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debe de coincidir la cantidad m\xE1xima de: ' +
              n +
              ""
          )
          .show(),
        ""
      );
  }
  var s = [],
    c = [];
  localStorage.getItem("shopping") &&
    (s = JSON.parse(localStorage.getItem("shopping"))),
    c.push(localStorage.getItem("plate")),
    $("input[id*='addon']:checked").each(function() {
      var g = $("#count-" + this.id + "").val(),
        h = [this.value, g];
      c.push(h);
    }),
    s.push(c),
    localStorage.setItem("shopping", JSON.stringify(s)),
    (window.location = e ? "ordenaEntrega.html" : "ordena.html");
}
function addPaymethod(e) {
  localStorage.setItem(
    "payMethod",
    JSON.stringify({ id: e, Nombre: 1 == e ? "Paypal" : "MercadoPago" })
  ),
    (window.location = "ordenaConfirma.html");
}
function deleteRow(e, o) {
  $("#light3").hide(), $("#fade").hide();
  var a = [];
  if (
    (localStorage.getItem("shopping") &&
      (a = JSON.parse(localStorage.getItem("shopping"))),
    a.length)
  ) {
    var r = "undefined";
    console.log(r);
    for (var n = 0, l = a.length; n < l; n++)
      if (a[n][0] === o) {
        r = n;
        break;
      } else r = "undefined";
    "undefined" != r && a.splice(r, 1);
  }
  localStorage.setItem("shopping", JSON.stringify(a)),
    $("#average").html(""),
    $("#average-modal").html(""),
    $("#tablaEstadoCuenta")
      .find("tr:gt(0)")
      .remove(),
    swal({
      title: "Actualizando pedido...",
      allowOutsideClick: !1,
      onOpen: function onOpen() {
        swal.showLoading();
      }
    }),
    setShoppingSummary().then(function() {
      var s =
          null == localStorage.getItem("shopping")
            ? 0
            : JSON.parse(localStorage.getItem("shopping")).length,
        c =
          null == localStorage.getItem("promotionsAll")
            ? 0
            : JSON.parse(localStorage.getItem("promotionsAll")).length;
      $("#number-cart").html(s + c), swal.close();
    });
}
function setPedido(e) {
  var o = $("#comentarios").val(),
    a = localStorage.getItem("collect_where");
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "setPedido",
      tarjeta: localStorage.getItem("tarjeta"),
      importe: localStorage.getItem("importe"),
      collect_date: localStorage.getItem("collect_date"),
      collect_time: localStorage.getItem("collect_time"),
      comentarios: o,
      summary: localStorage.getItem("shopping"),
      promotions: localStorage.getItem("promotionsAll"),
      sucursal: localStorage.getItem("branchConf"),
      userData: localStorage.getItem("auth"),
      where: localStorage.getItem("collect_where"),
      codigoPostal: localStorage.getItem("collect_postal"),
      cityArea: 1 == a ? localStorage.getItem("collect_cityarea") : "",
      cost: 1 == a ? localStorage.getItem("collect_cost") : "",
      street: 1 == a ? localStorage.getItem("collect_street") : "",
      numInt: 1 == a ? localStorage.getItem("collect_numbint") : "",
      numExt: 1 == a ? localStorage.getItem("collect_numbext") : "",
      referencias: 1 == a ? localStorage.getItem("collect_reference") : "",
      idToken: e
    },
    success: function success(r) {
      localStorage.setItem("historyPayment", r),
        localStorage.removeItem("shopping"),
        localStorage.removeItem("promotionsAll"),
        localStorage.removeItem("promotions"),
        localStorage.removeItem("collect_date"),
        localStorage.removeItem("collect_time"),
        localStorage.removeItem("importe"),
        localStorage.removeItem("plate"),
        localStorage.removeItem("branchConf"),
        localStorage.removeItem("category"),
        localStorage.removeItem("tokenPaypal"),
        localStorage.removeItem("collect_where"),
        localStorage.removeItem("collect_postal"),
        localStorage.removeItem("collect_cityarea"),
        localStorage.removeItem("collect_cost"),
        localStorage.removeItem("collect_state"),
        localStorage.removeItem("collect_province"),
        localStorage.removeItem("collect_latitude"),
        localStorage.removeItem("collect_longitude"),
        localStorage.removeItem("collect_country"),
        localStorage.removeItem("orderIndex"),
        localStorage.removeItem("orderLength"),
        localStorage.removeItem("order_plate"),
        localStorage.removeItem("orders"),
        localStorage.removeItem("__paypal_storage__"),
        (window.location = "ordenaCompletado.html");
    },
    error: function error(r, n, l) {
      console.log("funcion: setPedido()"),
        console.log("Status: " + n),
        console.log("Error: " + l),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getTransactions() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "getTransactions",
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success(e) {
      $(e.html).insertAfter("#tablaEstadoCuenta tr:last");
    },
    error: function error(e, o, a) {
      console.log("funcion: getTransactions()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function ordenaDetalleTransaccion(e) {
  localStorage.setItem("historyTransaction", e),
    (window.location = "ordenaDetalleTransaccion.html");
}
function addFavorite() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "addFavorite",
      consecutivo: localStorage.getItem("plate"),
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success() {
      $("#favorites").html(
        '<button type="button" onclick="removeFavorite();" class="btn btn-danger btn-block"><i class="fa fa-times"></i> Remover de favoritos </button>'
      );
    },
    error: function error(e, o, a) {
      console.log("funci\xF3n: addFavorite()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function removeFavorite() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "removeFavorite",
      consecutivo: localStorage.getItem("plate"),
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success() {
      $("#favorites").html(
        '<button type="button" onclick="addFavorite();" class="btn btn-favoritos btn-block"><i class="fa fa-star"></i> Agregar a favoritos </button>'
      );
    },
    error: function error(e, o, a) {
      console.log("funci\xF3n: removeFavorite()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function setFavorite() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "setFavorite",
      consecutivo: localStorage.getItem("plate"),
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success(e) {
      1 == e
        ? $("#favorites").html(
            '<button type="button" onclick="removeFavorite();" class="btn btn-danger btn-block"><i class="fa fa-times"></i> Remover de favoritos </button>'
          )
        : $("#favorites").html(
            '<button type="button" onclick="addFavorite();" class="btn btn-favoritos btn-block"><i class="fa fa-star"></i> Agregar a favoritos </button>'
          );
    },
    error: function error(e, o, a) {
      console.log("funci\xF3n: setFavorite()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getFavorites() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "getFavorites",
      consecutivo: localStorage.getItem("plate"),
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success(e) {
      0 == e.length
        ? $("#menu-categorias ul").append(
            "<li class='col-12 text-center'>Ning\xFAn producto en favoritos</li>"
          )
        : $.each(e, function(o, a) {
            $("#menu-categorias ul").append(
              "<li class='col-12' onclick=\"goPlate('" +
                a.Consecutivo +
                "');\" style='cursor: pointer;'><figure>" +
                imageDefault +
                "</figure><div class='categorias-descripcion'><article><p class='descripcion'>" +
                a.Nombre +
                "</p></article></div><div class='btn-siguiente text-right'><a href='#'><i class='fa fa-chevron-right'></i></a></div></li>"
            );
          });
    },
    error: function error(e, o, a) {
      console.log("funcion: getFavorites()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getHistoryPlates() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "getHistoryPlates",
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success(e) {
      "" == e
        ? ($("#text-history").html("No hay platillos por mostrar"),
          $("#button-history").remove())
        : $(e).insertAfter("#tablaEstadoCuenta tr:last");
    },
    error: function error(e, o, a) {
      console.log("funcion: getHistoryPlates()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getPromotions() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: { funcion: "getPromotions" },
    success: function success(e) {
      $.each(e, function(o, a) {
        $("#menu-categorias ul").append(
          "<li class='col-12' onclick=\"goPromotion('" +
            a.Promocion +
            "', '" +
            a.Promocion +
            "');\" style='cursor: pointer;'><figure>" +
            imageDefault +
            "</figure><div class='categorias-descripcion'><article><p class='descripcion'>" +
            a.Nombre +
            "</p></article></div><div class='btn-siguiente text-right'><a href='#'><i class='fa fa-chevron-right'></i></a></div></li>"
        );
      });
    },
    error: function error(e, o, a) {
      console.log("funcion: getPromotions()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getOrderMyBranch() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: { funcion: "getOrderMyBranch", sucursal: "1", comercio: cliente },
    success: function success(e) {
      console.log(e);
    },
    error: function error(e, o, a) {
      console.log("funcion: getOrderMyBranch()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function setAnswerOrder() {
  $.ajax({
    url: ruta,
    type: "POST",
    data: {
      funcion: "setAnswerOrder",
      sucursal: "1",
      pedido: "3",
      status: "13,1|6,2",
      comments: "Un pedido esta en proceso",
      comercio: cliente
    },
    success: function success(e) {
      console.log(e);
    },
    error: function error(e, o, a) {
      console.log("funcion: setAnswerOrder()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getPromotion() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "getPromotion",
      promotion: localStorage.getItem("promotion"),
      idCliente: cliente
    },
    success: function success(e) {
      localStorage.setItem("promoLength", e.length - 1),
        $("#plate-img").append(imageDefault2),
        $("#plate-title").append(
          e[localStorage.getItem("promoIndex")].Nombre +
            "<br/>$" +
            e[localStorage.getItem("promoIndex")].Precio +
            ".00 Pesos M.N."
        ),
        $("#plate-description").append(
          e[localStorage.getItem("promoIndex")].nombreProducto
        ),
        getAddonsPromotion(e[localStorage.getItem("promoIndex")].Consecutivo);
    },
    error: function error(e, o, a) {
      console.log("funcion: getPromotion()"),
        console.log("Status: " + o),
        console.log("Error: " + a),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getAddonsPromotion(e) {
  localStorage.setItem("promotion_plate", e),
    $.ajax({
      url: ruta,
      type: "POST",
      dataType: "json",
      data: { funcion: "getAddons", plate: e, idCliente: cliente },
      success: function success(o) {
        o.length
          ? ($("#plate-addons-count").addClass("hide"),
            $.each(o, function(a, r) {
              $("#plate-addons").append(
                '<section class="col-6 float-left no-pl"><label class="form-check-label"><input class="form-check-input" type="checkbox" name="addon' +
                  a +
                  '" value="' +
                  r.consecutivoComplemento +
                  '" id="addon' +
                  a +
                  '">' +
                  r.nombreComplemento +
                  "</label></section>"
              );
            }),
            $("#addons-message-max").html(o[0].maximoProducto),
            $("#plate-addons input[type='checkbox']").change(function() {
              var a = $("#plate-addons input:checked").length,
                r = $(this).attr("id"),
                n = $(this)
                  .parent("label")
                  .text();
              a == o[0].maximoProducto
                ? $("#plate-addons input:checkbox:not(:checked)").prop(
                    "disabled",
                    !0
                  )
                : $("#plate-addons input:checkbox").prop("disabled", !1);
              var l = $("input:checkbox:checked").length;
              $("#addons-message-how").html(l),
                0 < l && 0 < o[0].Cantidad
                  ? $("#plate-addons-count").removeClass("hide")
                  : $("#plate-addons-count").addClass("hide"),
                0 < o[0].Cantidad
                  ? ($("#plate-addons-count").show(),
                    $("#addons-message-count").html(o[0].Cantidad),
                    $(this).is(":checked")
                      ? $("#plate-addons-count").append(
                          '<section class="col-6 float-left no-pl"><label class="form-check-label"><input class="form-control-text" type="number" name="count-' +
                            r +
                            '" value="" id="count-' +
                            r +
                            '">' +
                            n +
                            "</label></section>"
                        )
                      : $("#count-" + r + "")
                          .parent()
                          .parent()
                          .remove(),
                    $("#average-max").val(o[0].Cantidad))
                  : $("#plate-addons-count").hide();
            }))
          : ($("#continue-promotion").attr("onclick", "addPromotion(1);"),
            $("#addons-message").remove());
      },
      error: function error(o, a, r) {
        console.log("funcion: getAddonsPromotion()"),
          console.log("Status: " + a),
          console.log("Error: " + r),
          swal({
            title: "Error!",
            text: "Ocurrio un error, por favor intentelo de nuevo",
            type: "error",
            allowOutsideClick: !1,
            confirmButtonText: "Aceptar"
          });
      }
    });
}
function addPromotion(e) {
  if (!e) {
    var o = $("#plate-addons input:checked").length;
    if (0 == o)
      return (
        $("#alertaRegistro")
          .html(
            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes de elegir alg\xFAn complemento'
          )
          .show(),
        ""
      );
    var a = 0,
      r = $("#average-max").val(),
      n = !1;
    if (
      ($("input[id*='count-addon']").each(function() {
        return 0 == this.value
          ? ($("#alertaRegistro")
              .html(
                '<i class="fa fa-warning fa-lg"></i>&nbsp;La cantidad del complemento no puede ser 0 o estar vac\xEDo'
              )
              .show(),
            (n = !0),
            "")
          : void ((a += parseInt(this.value)), (n = !1));
      }),
      n)
    )
      return "";
    if (r != a)
      return (
        $("#alertaRegistro")
          .html(
            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debe de coincidir la cantidad m\xE1xima de: ' +
              r +
              ""
          )
          .show(),
        ""
      );
  }
  var l = [],
    s = [],
    p = [];
  if (
    (localStorage.getItem("promotions") &&
      (l = JSON.parse(localStorage.getItem("promotions"))),
    s.push(localStorage.getItem("promotion_plate")),
    $("input[id*='addon']:checked").each(function() {
      var v = $("#count-" + this.id + "").val(),
        x = [this.value, v];
      s.push(x);
    }),
    l.push(s),
    localStorage.setItem("promotions", JSON.stringify(l)),
    localStorage.getItem("promoIndex") == localStorage.getItem("promoLength"))
  ) {
    localStorage.getItem("promotionsAll") &&
      (p = JSON.parse(localStorage.getItem("promotionsAll")));
    var u = [localStorage.getItem("promotion"), l];
    p.push(u),
      localStorage.setItem("promotionsAll", JSON.stringify(p)),
      (window.location = "ordenaEntrega.html");
  } else {
    var g = parseInt(localStorage.getItem("promoIndex")) + 1;
    localStorage.setItem("promoIndex", g),
      goPromotion(localStorage.getItem("promotion"));
  }
}
function deleteRowPromo(e, o) {
  $("#light4").hide(), $("#fade").hide();
  var a = [];
  if (
    (localStorage.getItem("promotionsAll") &&
      (a = JSON.parse(localStorage.getItem("promotionsAll"))),
    a.length)
  ) {
    for (var n = 0, l = a.length; n < l; n++)
      if (a[n][0] === o) {
        break;
      }
    "undefined" != r && a.splice(r, 1);
  }
  localStorage.setItem("promotionsAll", JSON.stringify(a)),
    $("#average").html(""),
    $("#average-modal").html(""),
    $("#tablaEstadoCuenta")
      .find("tr:gt(0)")
      .remove(),
    setShoppingSummary().then(function() {
      var s =
          null == localStorage.getItem("shopping")
            ? 0
            : JSON.parse(localStorage.getItem("shopping")).length,
        c =
          null == localStorage.getItem("promotionsAll")
            ? 0
            : JSON.parse(localStorage.getItem("promotionsAll")).length;
      $("#number-cart").html(s + c);
    });
}
function orderMasive() {
  var e = $("#tablaEstadoCuenta input:checkbox:checked");
  if (e.length) {
    var o = [];
    $.each(e, function() {
      o.push(this.value);
    }),
      localStorage.setItem("orders", JSON.stringify(o)),
      (window.location = "ordenaOrdenes.html");
  } else
    return (
      $("#alertaRegistro")
        .html(
          '<i class="fa fa-warning fa-lg"></i>&nbsp;Tienes que elegir alguna orden'
        )
        .show(),
      ""
    );
}
function getOrder() {
  return null === localStorage.getItem("orders") ||
  "" == localStorage.getItem("orders")
    ? (swal({
        title: "!Atenci\xF3n\xA1",
        type: "error",
        confirmButtonText: "Ir a historial",
        animation: !1,
        text: "No existen ordenes, por favor regresar al historial",
        showLoaderOnConfirm: !0,
        allowOutsideClick: !1,
        preConfirm: function preConfirm() {
          window.location.replace("ordenaPlatillos.html");
        }
      }),
      !1)
    : void $.ajax({
        url: ruta,
        type: "POST",
        dataType: "json",
        data: {
          funcion: "getOrder",
          orders: localStorage.getItem("orders"),
          idCliente: cliente
        },
        success: function success(e) {
          localStorage.setItem("orderLength", e.length - 1),
            $("#plate-img").append(imageDefault2),
            $("#plate-title").append(
              e[localStorage.getItem("orderIndex")].Nombre +
                "<br/>$" +
                e[localStorage.getItem("orderIndex")].Precio +
                ".00 Pesos M.N."
            ),
            getAddonsOrders(e[localStorage.getItem("orderIndex")].Consecutivo);
        },
        error: function error(e, o, a) {
          console.log("funcion: getOrder()"),
            console.log("Status: " + o),
            console.log("Error: " + a),
            swal({
              title: "Error!",
              text: "Ocurrio un error, por favor intentelo de nuevo",
              type: "error",
              allowOutsideClick: !1,
              confirmButtonText: "Aceptar"
            });
        }
      });
}
function getAddonsOrders(e) {
  localStorage.setItem("order_plate", e),
    $.ajax({
      url: ruta,
      type: "POST",
      dataType: "json",
      data: { funcion: "getAddons", plate: e, idCliente: cliente },
      success: function success(o) {
        o.length
          ? ($("#plate-addons-count").addClass("hide"),
            null === o[0].Agrupador
              ? ($("#continue-order").attr("onclick", "addOrder(1);"),
                $("#addons-message").remove())
              : ($.each(o, function(a, r) {
                  $("#plate-addons").append(
                    '<section class="col-6 float-left no-pl"><label class="form-check-label"><input class="form-check-input" type="checkbox" name="addon' +
                      a +
                      '" value="' +
                      r.consecutivoComplemento +
                      '" id="addon' +
                      a +
                      '">' +
                      r.nombreComplemento +
                      "</label></section>"
                  );
                }),
                $("#addons-message-max").html(o[0].maximoProducto),
                $("#plate-addons input[type='checkbox']").change(function() {
                  var a = $("#plate-addons input:checked").length,
                    r = $(this).attr("id"),
                    n = $(this)
                      .parent("label")
                      .text();
                  a == o[0].maximoProducto
                    ? $("#plate-addons input:checkbox:not(:checked)").prop(
                        "disabled",
                        !0
                      )
                    : $("#plate-addons input:checkbox").prop("disabled", !1);
                  var l = $("input:checkbox:checked").length;
                  $("#addons-message-how").html(l),
                    0 < l && 0 < o[0].Cantidad
                      ? $("#plate-addons-count").removeClass("hide")
                      : $("#plate-addons-count").addClass("hide"),
                    0 < o[0].Cantidad
                      ? ($("#plate-addons-count").show(),
                        $("#addons-message-count").html(o[0].Cantidad),
                        $(this).is(":checked")
                          ? $("#plate-addons-count").append(
                              '<section class="col-6 float-left no-pl"><label class="form-check-label"><input class="form-control-text" type="number" name="count-' +
                                r +
                                '" value="" id="count-' +
                                r +
                                '">' +
                                n +
                                "</label></section>"
                            )
                          : $("#count-" + r + "")
                              .parent()
                              .parent()
                              .remove(),
                        $("#average-max").val(o[0].Cantidad))
                      : $("#plate-addons-count").hide();
                })))
          : ($("#continue-order").attr("onclick", "addOrder(1);"),
            $("#addons-message").remove());
      },
      error: function error(o, a, r) {
        console.log("funcion: getAddonsOrders()"),
          console.log("Status: " + a),
          console.log("Error: " + r),
          swal({
            title: "Error!",
            text: "Ocurrio un error, por favor intentelo de nuevo",
            type: "error",
            allowOutsideClick: !1,
            confirmButtonText: "Aceptar"
          });
      }
    });
}
function addOrder(e) {
  if (!e) {
    var o = $("#plate-addons input:checked").length;
    if (0 == o)
      return (
        $("#alertaRegistro")
          .html(
            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes de elegir alg\xFAn complemento'
          )
          .show(),
        ""
      );
    var a = 0,
      r = $("#average-max").val(),
      n = !1;
    if (
      ($("input[id*='count-addon']").each(function() {
        return 0 == this.value
          ? ($("#alertaRegistro")
              .html(
                '<i class="fa fa-warning fa-lg"></i>&nbsp;La cantidad del complemento no puede ser 0 o estar vac\xEDo'
              )
              .show(),
            (n = !0),
            "")
          : void ((a += parseInt(this.value)), (n = !1));
      }),
      n)
    )
      return "";
    if (r != a)
      return (
        $("#alertaRegistro")
          .html(
            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debe de coincidir la cantidad m\xE1xima de: ' +
              r +
              ""
          )
          .show(),
        ""
      );
  }
  var l = [],
    s = [];
  if (
    (localStorage.getItem("shopping") &&
      (l = JSON.parse(localStorage.getItem("shopping"))),
    s.push(localStorage.getItem("order_plate")),
    $("input[id*='addon']:checked").each(function() {
      var f = $("#count-" + this.id + "").val(),
        v = [this.value, f];
      s.push(v);
    }),
    l.push(s),
    localStorage.setItem("shopping", JSON.stringify(l)),
    localStorage.getItem("orderIndex") == localStorage.getItem("orderLength"))
  )
    window.location = "ordenaEntrega.html";
  else {
    var u = parseInt(localStorage.getItem("orderIndex")) + 1;
    localStorage.setItem("orderIndex", u), goOrder();
  }
}
function PaymentPaypal(e) {
  paypal.rest.payment
    .create(
      "sandbox",
      {
        sandbox:
          "AVjidpyq3AChF8N-XVSZWruvzR458hl_WwHrSUmtQf7ngpCHUWA17lNnUb89WCTdfXUYsKxCINhaiuj5",
        production:
          "ASOuYaPFJfF02GiT8CsoPDsol_yO_rObixTr9jBcPBrtfFvvrLkO9EcBMPxiALfipoYFbmiNB_oaYlwh"
      },
      {
        payment: {
          transactions: [{ amount: { total: e, currency: "MXN" } }],
          redirect_urls: {
            return_url:
              "http://admin.lealtadprimero.com.mx/servicio/paypal.php?tarjeta=" +
              localStorage.getItem("tarjeta"),
            cancel_url: "cordova-app://cancel-url"
          }
        }
      }
    )
    .then(function(r) {
      setToken(r), localStorage.setItem("tokenPaypal", r);
      cordova.InAppBrowser.open(
        "https://www.sandbox.paypal.com/checkoutnow?token=" + r,
        "_blank",
        "location=yes"
      );
    });
}
function corroborarPedido() {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "getConfirmOrder",
      token: localStorage.getItem("tokenPaypal"),
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success(o) {
      swal({
        title: "Realizando registro...",
        timer: 1500,
        allowOutsideClick: !1,
        onOpen: function onOpen() {
          swal.showLoading();
        }
      }).then(function() {
        o.id
          ? (setPedido(o.id), localStorage.setItem("tokenPaypal", ""))
          : swal({
              title: "!Atenci\xF3n\xA1",
              type: "info",
              confirmButtonText: "Ir a p\xE1gina principal",
              animation: !1,
              text:
                "Ocurrio un problema con su pago, vuelva a realizar la compra o intente de nuevo.",
              showLoaderOnConfirm: !0,
              allowOutsideClick: !1,
              preConfirm: function preConfirm() {
                window.location.replace("ordenaConfirma.html");
              }
            });
      });
    },
    error: function error(o, a, r) {
      console.log("funcion: corroborarPedido()"),
        console.log("Status: " + a),
        console.log("Error: " + r),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function setToken(e) {
  $.ajax({
    url: ruta,
    type: "POST",
    data: {
      funcion: "setToken",
      token: e,
      tarjeta: localStorage.getItem("tarjeta")
    },
    success: function success(o) {
      console.log(o);
    },
    error: function error(o, a, r) {
      console.log("funcion: setToken()"),
        console.log("Status: " + a),
        console.log("Error: " + r),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getPaymentData(e) {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: {
      funcion: "getPaymentData",
      tarjeta: localStorage.getItem("tarjeta"),
      order: e
    },
    success: function success(o) {
      $("#folio").html(o.Numero),
        $("#id").html(o.PayerID),
        $("#state").html(o.paymentId),
        $("#cart").html(o.token),
        $("#create_time").html(o.update_at);
    },
    error: function error(o, a, r) {
      console.log("funcion: getPaymentData()"),
        console.log("Status: " + a),
        console.log("Error: " + r),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function getBranchsByCp(e) {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: { funcion: "getBranchsByCp", cp: e, cliente: cliente },
    success: function success(o) {
      $("#alertacp").hide();
      var a = o.length,
        r = $("#sucursales"),
        n = localStorage.getItem("collect_where");
      a
        ? (r.find("option:gt(0)").remove(),
          $.each(o, function(l, s) {
            0 == l
              ? (setConfBranch(s.id),
                localStorage.setItem("collect_cost", s.costo),
                r.append(
                  $("<option>", {
                    value: s.id,
                    text:
                      s.nombreAgencia +
                      (1 == n
                        ? 0 < s.costo
                          ? " ($" + s.costo + ".00 costo de env\xEDo)"
                          : " (env\xEDo gratis)"
                        : ""),
                    selected: "selected",
                    dataCost: s.costo
                  })
                ))
              : r.append(
                  $("<option>", {
                    value: s.id,
                    text:
                      s.nombreAgencia +
                      (1 == n
                        ? 0 < s.costo
                          ? " ($" + s.costo + ".00 costo de env\xEDo)"
                          : " (env\xEDo gratis)"
                        : ""),
                    dataCost: s.costo
                  })
                );
          }))
        : (setConfBranch(),
          r.find("option:gt(0)").remove(),
          $("#alertacp").show());
    },
    error: function error(o, a, r) {
      console.log("funcion: getBranchsByCp()"),
        console.log("Status: " + a),
        console.log("Error: " + r),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function setConfBranch(e) {
  return e
    ? void $.ajax({
        url: ruta,
        type: "POST",
        dataType: "json",
        data: { funcion: "setConfBranch", idBranch: e, cliente: cliente },
        success: function success(o) {
          localStorage.setItem("branchConf", JSON.stringify(o));
        },
        error: function error(o, a, r) {
          console.log("funcion: setConfBranch()"),
            console.log("Status: " + a),
            console.log("Error: " + r),
            swal({
              title: "Error!",
              text: "Ocurrio un error, por favor intentelo de nuevo",
              type: "error",
              allowOutsideClick: !1,
              confirmButtonText: "Aceptar"
            });
        }
      })
    : (localStorage.removeItem("branchConf"), !1);
}
function fillCalendar() {
  for (
    var e = new Date(),
      o = localStorage.getItem("MaxMinutes"),
      a = {},
      r = e.getHours(),
      n = e.getMinutes(),
      l = 1;
    23 >= l;
    l++
  )
    if (1 == l.toString().length) {
      var s = "0" + l;
      a[l] = s;
    } else a[l] = l;
  $.each(a, function(w, O) {
    r + 1 == O
      ? $("#hour").append(
          $("<option>", { value: w, text: O, selected: "selected" })
        )
      : $("#hour").append($("<option>", { value: w, text: O }));
  });
  for (var c = {}, p = 0; 59 >= p; p++)
    if (1 == p.toString().length) {
      var u = "0" + p;
      c[p] = u;
    } else c[p] = p;
  $.each(c, function(w, O) {
    n == O
      ? $("#minute").append(
          $("<option>", { value: w, text: O, selected: "selected" })
        )
      : $("#minute").append($("<option>", { value: w, text: O }));
  });
  for (
    var g = e.getFullYear(), h = e.getMonth(), f = e.getDate(), v = {}, x = 1;
    31 >= x;
    x++
  )
    v[x] = x;
  $.each(v, function(w, O) {
    f == O
      ? $("#day").append(
          $("<option>", { value: w, text: O, selected: "selected" })
        )
      : $("#day").append($("<option>", { value: w, text: O }));
  });
  $.each(
    [
      "Ene",
      "Feb",
      "Mar",
      "Abr",
      "May",
      "Jun",
      "Jul",
      "Ago",
      "Sep",
      "Oct",
      "Nov",
      "Dic"
    ],
    function(w, O) {
      h == w
        ? $("#month").append(
            $("<option>", { value: w, text: O, selected: "selected" })
          )
        : $("#month").append($("<option>", { value: w, text: O }));
    }
  );
  for (var b = {}, C = g; C <= g + 10; C++) b[C] = C;
  $.each(b, function(w, O) {
    g == O
      ? $("#year").append(
          $("<option>", { value: w, text: O, selected: "selected" })
        )
      : $("#year").append($("<option>", { value: O, text: O }));
  });
}
function getCityByCoverage(e) {
  $.ajax({
    url: ruta,
    type: "POST",
    dataType: "json",
    data: { funcion: "getCityByCoverage", cp: e, cliente: cliente },
    success: function success(o) {
      $("#alertacp").hide();
      var a = o.length,
        r = $("#collect_cityarea");
      a
        ? (r.find("option:gt(0)").remove(),
          $.each(o, function(n, l) {
            1 == a
              ? r.append(
                  $("<option>", {
                    value: l.id,
                    text: l.asentamiento,
                    selected: "selected"
                  })
                )
              : r.append($("<option>", { value: l.id, text: l.asentamiento }));
          }))
        : (r.find("option:gt(0)").remove(), $("#alertacp").show());
    },
    error: function error(o, a, r) {
      console.log("funcion: getCityByCoverage()"),
        console.log("Status: " + a),
        console.log("Error: " + r),
        swal({
          title: "Error!",
          text: "Ocurrio un error, por favor intentelo de nuevo",
          type: "error",
          allowOutsideClick: !1,
          confirmButtonText: "Aceptar"
        });
    }
  });
}
function orderSave() {
  if (
    ($("#alertaRegistro").hide(), null === localStorage.getItem("branchConf"))
  )
    return (
      $("#alertaRegistro")
        .html('<i class="fa fa-warning fa-lg"></i>&nbsp;No existe cobertura')
        .show(),
      !1
    );
  var e = JSON.parse(localStorage.getItem("branchConf")),
    o = localStorage.getItem("MaxMinutes"),
    a = parseInt($("#day").val()),
    r = parseInt($("#month").val()) + 1,
    n = parseInt($("#year").val()),
    l = a + "/" + r + "/" + n,
    s = new Date(),
    c = new Date("" + n + "-" + r + "-" + a + "");
  s.setHours(0, 0, 0, 0);
  var p = c.getTime() / 1e3,
    u = 86400 * parseInt(e.diasPedido),
    g = new Date(),
    h = g / 1e3 + u,
    f = new Date("" + n + "-" + r + "-" + a + " " + e.horaInicio + ""),
    v = new Date("" + n + "-" + r + "-" + a + " " + e.horaFin + ""),
    x = $("#hour").val(),
    I = $("#minute").val(),
    b = !0;
  1 == x.toString().length && (x = "0" + x),
    1 == I.toString().length && (I = "0" + I);
  var C = new Date("" + n + "-" + r + "-" + a + " " + x + ":" + I + ":00");
  if (e.horaInicio > e.horaFin) {
    var w = e.horaFin.split(":"),
      O = v / 1e3 + 86400;
    (v = new Date(1e3 * O)), v.setHours(w[0], w[1], w[2], 0);
  }
  b = C > f && C < v;
  var k = new Date();
  (k = k / 1e3 + 60 * o), (k = new Date(1e3 * k));
  var P = new Date("" + n + "-" + r + "-" + a + " " + x + ":" + I + ":00");
  1 == localStorage.getItem("collect_where")
    ? isDate(l)
      ? p > h
        ? $("#alertaRegistro")
            .html(
              '<i class="fa fa-warning fa-lg"></i>&nbsp;Fecha excedida para pedidos'
            )
            .show()
        : c < s
          ? $("#alertaRegistro")
              .html(
                '<i class="fa fa-warning fa-lg"></i>&nbsp;Fecha anterior a hoy'
              )
              .show()
          : b
            ? P < k
              ? $("#alertaRegistro")
                  .html(
                    '<i class="fa fa-warning fa-lg"></i>&nbsp;El horario no puede ser menor a ' +
                      k.getHours() +
                      ":" +
                      k.getMinutes()
                  )
                  .show()
              : "" == $("#collect_cityarea").val()
                ? $("#alertaRegistro")
                    .html(
                      '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes de insertar la colonia'
                    )
                    .show()
                : "" == $("#collect_street").val()
                  ? $("#alertaRegistro")
                      .html(
                        '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes insertar la calle'
                      )
                      .show()
                  : "" == $("#collect_numbext").val()
                    ? $("#alertaRegistro")
                        .html(
                          '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes insertar n\xFAmero exterior'
                        )
                        .show()
                    : "" == $("#collect_reference").val()
                      ? $("#alertaRegistro")
                          .html(
                            '<i class="fa fa-warning fa-lg"></i>&nbsp;Debes de insertar referencias'
                          )
                          .show()
                      : (localStorage.setItem(
                          "collect_postal",
                          $("#collect_postal").val()
                        ),
                        localStorage.setItem(
                          "collect_date",
                          "" + n + "-" + r + "-" + a + ""
                        ),
                        localStorage.setItem(
                          "collect_time",
                          "" + x + ":" + I + ":00"
                        ),
                        localStorage.setItem(
                          "collect_cityarea",
                          JSON.stringify({
                            id: $("#collect_cityarea")
                              .find("option:selected")
                              .val(),
                            Nombre: $("#collect_cityarea")
                              .find("option:selected")
                              .text()
                          })
                        ),
                        localStorage.setItem(
                          "collect_street",
                          $("#collect_street").val()
                        ),
                        localStorage.setItem(
                          "collect_numbext",
                          $("#collect_numbext").val()
                        ),
                        localStorage.setItem(
                          "collect_numbint",
                          $("#collect_numbint").val()
                        ),
                        localStorage.setItem(
                          "collect_reference",
                          $("#collect_reference").val()
                        ),
                        (window.location = "ordenaConfirma.html"))
            : $("#alertaRegistro")
                .html(
                  '<i class="fa fa-warning fa-lg"></i>&nbsp;La hora no esta en horario de entrega'
                )
                .show()
      : $("#alertaRegistro")
          .html('<i class="fa fa-warning fa-lg"></i>&nbsp;Fecha no valida')
          .show()
    : isDate(l)
      ? p > h
        ? $("#alertaRegistro")
            .html(
              '<i class="fa fa-warning fa-lg"></i>&nbsp;Fecha excedida para pedidos'
            )
            .show()
        : c < s
          ? $("#alertaRegistro")
              .html(
                '<i class="fa fa-warning fa-lg"></i>&nbsp;Fecha anterior a hoy'
              )
              .show()
          : b
            ? P < k
              ? $("#alertaRegistro")
                  .html(
                    '<i class="fa fa-warning fa-lg"></i>&nbsp;El horario no puede ser menor a ' +
                      k.getHours() +
                      ":" +
                      k.getMinutes()
                  )
                  .show()
              : (localStorage.setItem(
                  "collect_postal",
                  $("#collect_postal").val()
                ),
                localStorage.setItem(
                  "collect_date",
                  "" + n + "-" + r + "-" + a + ""
                ),
                localStorage.setItem("collect_time", "" + x + ":" + I + ":00"),
                (window.location = "ordenaConfirma.html"))
            : $("#alertaRegistro")
                .html(
                  '<i class="fa fa-warning fa-lg"></i>&nbsp;La hora no esta en horario de entrega'
                )
                .show()
      : $("#alertaRegistro")
          .html('<i class="fa fa-warning fa-lg"></i>&nbsp;Fecha no valida')
          .show();
}
